//
// Generated file, do not edit! Created by opp_msgc 4.2 from ClusterPkt.msg.
//

#ifndef _CLUSTERPKT_M_H_
#define _CLUSTERPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>ClusterPkt.msg</tt> by opp_msgc.
 * <pre>
 * enum ClusterMessageTypes 
 * { 
 *     	CLUSTER_INIT 		= 11;
 *     	CLUSTER_JOIN 		= 21;
 *     	CLUSTER_ACCEPTED 	= 31;
 *     	CLUSTER_NEIGH_INQ 	= 41;
 *     	CLUSTER_NEIGH_RESP 	= 51;
 *     	CLUSTER_PING 		= 61;
 *     	CLUSTER_PONG 		= 71;
 *     	CLUSTER_REJOIN		= 81;
 * };
 * </pre>
 */
enum ClusterMessageTypes {
    CLUSTER_INIT = 11,
    CLUSTER_JOIN = 21,
    CLUSTER_ACCEPTED = 31,
    CLUSTER_NEIGH_INQ = 41,
    CLUSTER_NEIGH_RESP = 51,
    CLUSTER_PING = 61,
    CLUSTER_PONG = 71,
    CLUSTER_REJOIN = 81
};

/**
 * Class generated from <tt>ClusterPkt.msg</tt> by opp_msgc.
 * <pre>
 * packet ClusterPkt {
 * 	int msgtype enum(ClusterMessageTypes);
 * 	int headId;
 * 	int originId;
 * };
 * </pre>
 */
class ClusterPkt : public ::cPacket
{
  protected:
    int msgtype_var;
    int headId_var;
    int originId_var;

  private:
    void copy(const ClusterPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ClusterPkt&);

  public:
    ClusterPkt(const char *name=NULL, int kind=0);
    ClusterPkt(const ClusterPkt& other);
    virtual ~ClusterPkt();
    ClusterPkt& operator=(const ClusterPkt& other);
    virtual ClusterPkt *dup() const {return new ClusterPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getMsgtype() const;
    virtual void setMsgtype(int msgtype);
    virtual int getHeadId() const;
    virtual void setHeadId(int headId);
    virtual int getOriginId() const;
    virtual void setOriginId(int originId);
};

inline void doPacking(cCommBuffer *b, ClusterPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ClusterPkt& obj) {obj.parsimUnpack(b);}


#endif // _CLUSTERPKT_M_H_
