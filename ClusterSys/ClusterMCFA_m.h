//
// Generated file, do not edit! Created by opp_msgc 4.2 from ClusterMCFA.msg.
//

#ifndef _CLUSTERMCFA_M_H_
#define _CLUSTERMCFA_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>ClusterMCFA.msg</tt> by opp_msgc.
 * <pre>
 * enum MCFAMessageTypes 
 * { 
 *     	MCFA_ASFREQ 	= 10;
 *     	MCFA_ASFREP		= 20;
 *     	MCFA_RERM 		= 30;
 *     	MCFA_JREQ 		= 40;
 *     	MCFA_JREP 		= 50;
 *     	MCFA_CHSEL	 	= 60;
 *     	MCFA_LREQ 		= 70;
 *     	MCFA_MOBINFO	= 80;
 * };
 * </pre>
 */
enum MCFAMessageTypes {
    MCFA_ASFREQ = 10,
    MCFA_ASFREP = 20,
    MCFA_RERM = 30,
    MCFA_JREQ = 40,
    MCFA_JREP = 50,
    MCFA_CHSEL = 60,
    MCFA_LREQ = 70,
    MCFA_MOBINFO = 80
};

/**
 * Class generated from <tt>ClusterMCFA.msg</tt> by opp_msgc.
 * <pre>
 * packet ClusterMCFA  {
 * 	int msgtype enum(MCFAMessageTypes);
 * 	int headId;
 * 	int originId;
 * 	double ERM;
 * 	double Speed;
 * 	double Direction;
 * };
 * </pre>
 */
class ClusterMCFA : public ::cPacket
{
  protected:
    int msgtype_var;
    int headId_var;
    int originId_var;
    double ERM_var;
    double Speed_var;
    double Direction_var;

  private:
    void copy(const ClusterMCFA& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ClusterMCFA&);

  public:
    ClusterMCFA(const char *name=NULL, int kind=0);
    ClusterMCFA(const ClusterMCFA& other);
    virtual ~ClusterMCFA();
    ClusterMCFA& operator=(const ClusterMCFA& other);
    virtual ClusterMCFA *dup() const {return new ClusterMCFA(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getMsgtype() const;
    virtual void setMsgtype(int msgtype);
    virtual int getHeadId() const;
    virtual void setHeadId(int headId);
    virtual int getOriginId() const;
    virtual void setOriginId(int originId);
    virtual double getERM() const;
    virtual void setERM(double ERM);
    virtual double getSpeed() const;
    virtual void setSpeed(double Speed);
    virtual double getDirection() const;
    virtual void setDirection(double Direction);
};

inline void doPacking(cCommBuffer *b, ClusterMCFA& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ClusterMCFA& obj) {obj.parsimUnpack(b);}


#endif // _CLUSTERMCFA_M_H_
